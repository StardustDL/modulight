{
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | Modulight",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "Modulight | Modulight",
    "keywords": "Modulight Modulight is a light modular framework aimed to be low intrusive based on dependency injection for .NET 5, ASP.NET Core and Blazor. Features Dependency injection Unified services registering Client (Blazor) Unified CSS & JS lazy loading & prerendering. No need to append <script> and <link> repeatedly for every razor components, especially when use different hosting models. Unified assembly lazy loading. Interop between modules and host. Server (GraphQL cooperated with ChilliCream GraphQL Platform ) Unified query/mutation/subscription definition Builtin module options support It provides a place to unify resources, and it can be used to make Razor component library easy to use and manage. The user needn't to take care of related services and <script> or <link> tags in index.html . Usage Use modules Register modules. For Razor component & AspNet server modules: services.AddModules(builder => { builder.AddModule<FooModule>(); }); For GraphQL server modules: services.AddModules(builder => { builder.UseGraphQLServerModules().AddModule<FooModule>(); }); Additional step for AspNet server modules: // in Startup: void Configure(IApplicationBuilder app, IWebHostEnvironment env) app.UseAspNetServerModuleMiddlewares(); app.UseEndpoints(endpoints => { // modules mapper endpoints.MapAspNetServerModuleEndpoints(); endpoints.MapGraphQLServerModuleEndpoints(postMapEndpoint: (module, builder) => { builder.RequireCors(cors => { cors.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod(); }); }); // other mapper, eg: endpoints.MapControllers(); }); Additional step for GraphQL server modules: // in Startup: void Configure(IApplicationBuilder app, IWebHostEnvironment env) app.UseEndpoints(endpoints => { // modules mapper endpoints.MapGraphQLServerModuleEndpoints(postMapEndpoint: (module, builder) => { builder.RequireCors(cors => { cors.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod(); }); }); // other mapper, eg: endpoints.MapControllers(); }); Configure the module initilizing & shutdown. // in Program: Task Main(string[] args) var host = CreateHostBuilder(args).Build(); await using var _ = await host.Services.UseModuleHost(); await host.RunAsync(); For razor components, add ResourceDeclare component to App.razor to load UI resources. <Modulight.Modules.Client.RazorComponents.UI.ResourceDeclare /> This component will find all resources defined in modules, and render HTML tags for them. This works for normal cases, but if you use WebAssembly target, no prerenderring, and the component library need the javascript files to be loaded initially. You can use the following codes to load resources manually. // WebAssemblyHost host; await host.Services.GetRazorComponentClientModuleCollection().LoadResources(); Use Blazor UI Template Modulight provide a template project for Blazor hosting with Razor Component Client modules. Use package Modulight.UI.Blazor and Modulight.UI.Blazor.Hosting to try it. It provides a navigation layout generated by client modules, and supports prerendering. class CustomBlazorUIProvider : BlazorUIProvider { public CustomBlazorUIProvider(IRazorComponentClientModuleCollection razorComponentClientModuleCollection) : base(razorComponentClientModuleCollection) { } } // void ConfigureServices(IServiceCollection services) services.AddModules(builder => { builder.AddServerSideBlazorUI<CustomBlazorUIProvider>(); }); // void Configure(IApplicationBuilder app, IWebHostEnvironment env) app.UseAspNetServerModuleMiddlewares(); app.UseStaticFiles(); app.UseRouting(); app.UseEndpoints(endpoints => { endpoints.MapAspNetServerModuleEndpoints(); }); A Sample startup . Example codes They are based on nightly build package at: NUGET source Design a client (Blazor) module HelloModule.cs Client module definition. Index.razor Client module pages. It belongs to a different assembly from which Module belongs to because we want this assembly is lazy loading. Design a GraphQL server module HelloServerModule.cs GraphQL server module definition. Use a client module in Blazor websites ModulePageLayout.razor Layout and container for module pages. App.razor Lazy loading for js/css/sassemblies when routing. UIModule.cs Definition of JS/CSS resources. ModuleSetup.cs Use modules in client. Startup.cs Blazor Server hosting. Program.cs Blazor WebAssembly hosting. index.html Clean index.html. Use a GraphQL server module Startup.cs GraphQL server integrating."
  }
}